{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := ''}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '2 BETA'}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}
var
  RSW: TRSWalker;
  MINENERGY: Integer                         = 50;


begin
  Login.PlayerIndex := 1;
end;

const
  HOUSE_POLY: TPointArray = [[8662, 3883], [8662, 3901], [8688, 3901], [8688, 3883]];

type
  EState = (
    STATE_TELEPORT_TO_GARDEN,
    STATE_ENTER_GARDEN,
    STATE_MAKE_JUICE,
    STATE_GIVE_SQIRKS,
    STATE_DO_BANKING,
    STATE_EXIT_GARDEN,
    STATE_OUT_SUPPLIES,
    STATE_DO_SQIRK
  );

  ELocation = (
    ALKAHID,
    GARDEN,
    GARDENLOBBY
  );

  SQIRK = record (TBaseBankScript)
    CurrentState: EState;

    StartXP: Integer;

    Apprentice: TRSNPC;
    Selim: TRSNPC;

    GardenGate: TRSObject;
    Sqirktree: TRSObject;
    Fountain: TRSObject;

    SummerSqirk: TRSItem;
    BeerGlass: TRSItem;
    SummerSqirkJuice: TRSItem;
    PestleAndMortar: TRSItem;

    PestleAndMortarBank: TRSBankItem;
    BeerGlassBank: TRSBankItem;

    MyPos: TPoint;
end;

var
  Timer: TStopWatch;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.THIEVING, ERSSkill.TOTAL];
  Self.MinZoom := 0;
  Self.MaxZoom := 10;

  inherited;
end;

procedure TRSWalker.AddMapAsRegion(map: string; mapBounds: TBox); overload; // Yoinked
begin
  Self.Map.Load(map, mapBounds, Self.Scaling);
  Self.InternalSetup();
end;        

function SQIRK.GetLocation(): ELocation;
begin
  if (not RSClient.IsLoggedIn) then Exit;

  MyPos := Self.RSW.GetMyPos;

  if MyPos.InBox([8356, 3096, 9171, 4090]) then Exit(ALKAHID);
  if MyPos.InBox([160, 60, 241, 119]) then Exit(GARDEN); // This is the garden maze
  if MyPos.InBox([156, 123, 208, 183]) then Exit(GARDENLOBBY); // Garden Lobby
end;

procedure SQIRK.SetupNPCS();
begin
  with Apprentice do
  begin
    Setup([[8677, 3892]]);
    Setup(['Apprentice']);
    Apprentice.DotFilter.Setup(HOUSE_POLY, True);
    Apprentice.ShapeArray.SetShape([1, 1, 6]);
    Finder.Colors += CTS2(9547150, 20, 0.97, 0.34);
  end;

  with Selim do
  begin
    Setup(20, 7, [[8538, 3724]]);
    Setup(['Selim', 'Osman']);
    Finder.Colors += CTS2(2636090, 9, 0.12, 0.61);
  end;
end;

procedure SQIRK.SetupObjects();
begin
  with GardenGate do
  begin
    Setup(5, [[176, 120]]);
    Setup(['Gate']);
    Finder.Colors += CTS2(5339027, 16, 0.03, 0.40);
  end;

  with Sqirktree do
  begin
    Setup(5, 10, [[197, 77]]);
    Setup(['Sq''irk tree']);
    Finder.ColorClusters += [CTS2(9421243, 11, 0.98, 0.89), CTS2(2109625, 14, 0.05, 1.42), 1];
  end;

  with Fountain do
  begin
    Setup(5, [[182, 156]]);
    Setup(['Fountain']);
    Finder.Colors += CTS2(12832194, 13, 1.90, 0.65);
  end;
end; 

procedure SQIRK.CheckForRandomItems();
var
  itemsToKeep: TRSItemArray;
  unwantedItems: TIntegerArray;
begin
  itemsToKeep := [
    PestleAndMortar, 
    SummerSqirkJuice, 
    SummerSqirk, 
    BeerGlass, 
    'Stamina potion(1)', 
    'Stamina potion(2)', 
    'Stamina potion(3)', 
    'Stamina potion(4)', 
    'White tree fruit', 
    'Bandages', 
    'Guthix rest(1)', 
    'Guthix rest(2)', 
    'Guthix rest(3)', 
    'Guthix rest(4)', 
    'Papaya fruit', 
    'Energy potion(1)', 
    'Energy potion(2)', 
    'Energy potion(3)', 
    'Energy potion(4)', 
    'Purple sweets', 
    'Summer pie(1)', 
    'Summer pie(2)', 
    'Super energy(1)', 
    'Super energy(2)', 
    'Super energy(3)', 
    'Super energy(4)', 
    'Strange fruit', 
    'Mint cake', 
    'Gout tuber'
  ];
  unwantedItems := Inventory.FindRandomItems(itemsToKeep);
  if Length(unwantedItems) > 0 then
  begin
    WriteLn('Dropping unwanted items...');
    Inventory.ShiftDrop(unwantedItems);
  end;
  Wait(Random(200, 500));
end;

procedure SQIRK.TELEPORT_TO_GARDEN();
begin
  writeln('Attempting to Teleport to Garden.');
  RSMouseZoom.SetZoomLevel(45);
  repeat
    Apprentice.WalkSelectOption(['Teleport']);
  until Mainscreen.DidRedClick() or Chat.HasContinue;

  if Chat.HasContinue then
  begin
    Chat.ClickContinue(True);
    Wait(RandomRange(600, 1200));
    Chat.ClickContinue(True);
  end;
  
  writeln('Teleporting to Garden.');
  WaitUntil(Fountain.IsVisible, 120, 10000);
  RSMouseZoom.SetZoomLevel(0);
end;

procedure SQIRK.ENTER_GARDEN();
begin
  WriteLn('Looking for garden gate.');
  repeat
    GardenGate.Click();
  until Mainscreen.DidRedClick();
  WaitUntil(Self.GetLocation() = GARDEN, 120, 10000);
end;

procedure SQIRK.MAKE_JUICE();
begin
  CheckForRandomItems();
  if (Inventory.CountItem(SummerSqirk) >= 2) then
  begin
    writeln('Making Summer Sqirk!');
    Inventory.Use(PestleAndMortar, SummerSqirk);
    WL.Activity.Restart();
    XPBar.WaitXP(3000, 80);
    Wait(RandomRange(400, 600));
  end;
end;

procedure SQIRK.EXIT_GARDEN();
begin
  WriteLn('Attempting to exit garden.');
  repeat
    Fountain.WalkClick();
  until Mainscreen.DidRedClick();
  WaitUntil(Self.GetLocation() = ALKAHID, 120, 10000);
  Wait(RandomRange(1000, 1400));
end;

procedure SQIRK.GIVE_SQIRKS();
begin
  writeln('No empty glasses and we have juice to hand-in, moving to Selim to hand-in.');
  repeat
    Selim.WalkClick();
  until Mainscreen.DidRedClick() or Chat.HasContinue;
  if WaitUntil(Chat.HasContinue, 50, 30000) then
  begin
    writeln('Talking to NPC, Handling dialog');
    Chat.ChatToOption('I''d like to talk about sq''irks');
    Chat.ClickOption('I''d like to talk about sq''irks', TRUE);
    WaitUntil(Chat.HasContinue, 50, 4000);
    Chat.ClickContinue(True);
    WaitUntil(Chat.HasContinue, 50, 4000);
    Chat.ClickContinue(True);
  end;
end;

procedure SQIRK.OUT_SUPPLIES();
begin
  MainScreen.CloseInterface(True);
  writeln('Out of Supplies or lost?, Terminating.');
  Logout.ClickLogout();
  TerminateScript();
end;

// Had to redo this because the trash array was a constant and we need to NOT drop Beer Glasses.....
function TRSInventory.Consume(consumableType: ERSConsumable; out slots: TIntegerArray): Boolean;  override;
var
  consumableHandler, tmp: PConsumableHandler;
  foundConsumables: TRSConsumableArray;
  startingPoints: Int32;
  trashSlots: TIntegerArray;
  TRASH_ARRAY2: TRSItemArray;
begin
  TRASH_ARRAY2 := ['Cocktail glass', 'Jug', 'Bowl', 'Pie dish', 'Vial', 'Empty cup'];
  consumableHandler := TConsumableHandler.GetHandler(consumableType);
  if not consumableHandler^.IsSetup then
    Exit;

  case consumableType of

    ERSConsumable.ENERGY_CONSUMABLE:
      startingPoints := Minimap.GetRunEnergy();
  end;

  slots := Self.FindConsumable(consumableType, foundConsumables);

  if slots.Len() = 0 then
    Exit;

  if not Antiban.BioDice(EBioBehavior.CONSUME_IN_BANK) and
     MainScreen.HasInterface() then
     MainScreen.CloseInterface();

  if (consumableHandler^.Delay.Length > 0) then
    while not consumableHandler^.Delay.IsFinished() do
      Wait(50, 100);

  Result := Self.ClickSlot(slots[0], ['Eat', 'Drink']);

  if Result then
    case consumableType of

      ERSConsumable.ENERGY_CONSUMABLE:
        Result := WaitUntil(startingPoints < Minimap.GetRunEnergy(), 100, 3000);
      else
        BioWait(1000, 2000, wdLeft);
    end;

  if Result then
  begin
    case consumableType of
      ERSConsumable.FOOD_CONSUMABLE:
        begin
          if foundConsumables[0].Item = 'Cooked karambwan' then
            consumableHandler^.Delay.Init(1200)
          else
            consumableHandler^.Delay.Init(1800);
        end;
      else
        for tmp in CONSUMABLE_HANDLER_ARRAY do
            tmp^.Delay.Init(600);
    end;

    if foundConsumables[0].Timer > 0 then
    begin
      if consumableHandler^.Timer.Length <> foundConsumables[0].Timer then
        consumableHandler^.Timer.Setup(foundConsumables[0].Timer);

      if consumableType = ERSConsumable.ANTI_FIRE_CONSUMABLE then
        consumableHandler^.Timer.Restart(Random(-50000, -20000))
      else
        consumableHandler^.Timer.Restart(Random(-3000, 3000));
    end;

    TotalConsumableCost += foundConsumables[0].Cost;

    if Self.FindItems(TRASH_ARRAY2, trashSlots) then
    begin
      if Bank.IsOpen() then
        Bank.DepositSlot([trashSlots[0], -1], False)
      else
        Self.ShiftDrop(trashSlots.Intersection(Self.RandomPattern()));

      slots := slots.Difference(trashSlots); //Delete trashSlots from slots.
    end;
  end;
end;

procedure SQIRK.DO_BANKING();
var
  FreeSlots: Integer;
begin
  writeln('Heading to bank.');
  Bank.WalkOpen();
  WaitUntil(Bank.IsOpen(), 375, 30000);
  if Bank.IsOpen() then
  begin
    if not Inventory.ContainsItem(PestleAndMortar) then
    begin
      writeln('No Pestal and Mortar found in Inventory, Withdrawing Pestle and Mortar from bank.');
      Bank.WithdrawItem(PestleAndMortarBank, TRUE);
      WaitUntil(Inventory.ContainsItem(PestleAndMortar), 375, 4000);
    end;
//    Bank.WithdrawConsumableAmount(ENERGY_CONSUMABLE); 
//    Bank.WithdrawConsumable(ENERGY_CONSUMABLE);

    FreeSlots := Inventory.CountEmptySlots();
    FreeSlots -= 2;
    BeerGlassBank := TRSBankItem.Setup(BeerGlass, FreeSlots, FALSE);
    writeln('Withdrawing ' + IntToStr(FreeSlots) + ' Empty beer glass for SQIRKIN!');
    Bank.WithdrawItem(BeerGlassBank, TRUE);
    WaitUntil(Inventory.ContainsItem(BeerGlass), 375, 4000);
    FreeSlots := Inventory.CountEmptySlots();
    if FreeSlots < 2 then
    begin
      writeln('Less than 2 free slots after banking, Terminating.'); // Placeholder for now, we may need a failsafe?
      Bank.Close();
      Logout.ClickLogout();
      TerminateScript();
    end;
    if Bank.IsOpen() then
      Bank.Close();
  end;
end;

procedure SQIRK.DO_SQIRK();
begin
  CheckForRandomItems();
  
  if Minimap.GetRunEnergy() > MINENERGY then
  begin
    Minimap.EnableRun();
  end

//  if not Minimap.HasStamina then
//  begin
//    Inventory.Consume(ENERGY_CONSUMABLE);
//  end; 

  writeln('Looking for SQIRKIN Tree');
  repeat
    Sqirktree.Click();
  until Mainscreen.DidRedClick();

  Wait(RandomRange(100, 200));
  
  WaitUntil(Self.GetLocation() = GARDENLOBBY, 120, 50000);
end;

procedure SQIRK.doAction();
begin
  case Self.GetState() of
    STATE_ENTER_GARDEN:
      ENTER_GARDEN();
    STATE_MAKE_JUICE:
      MAKE_JUICE;
    STATE_DO_SQIRK:
      DO_SQIRK();
    STATE_EXIT_GARDEN:
      EXIT_GARDEN;
    STATE_GIVE_SQIRKS:
      GIVE_SQIRKS();
    STATE_DO_BANKING:
      DO_BANKING;
    STATE_OUT_SUPPLIES:
      OUT_SUPPLIES;
    STATE_TELEPORT_TO_GARDEN:
      TELEPORT_TO_GARDEN();
  end;
end;

function SQIRK.GetState(): EState;
begin
  if (Self.GetLocation() = ALKAHID) and Inventory.ContainsItem(BeerGlass) and Inventory.ContainsItem(PestleAndMortar) and (Inventory.CountEmptySlots() >= 2) then
    Exit(STATE_TELEPORT_TO_GARDEN)
  else if (Self.GetLocation() = ALKAHID) and (Inventory.CountItem(SummerSqirkJuice) >= 1) and not Inventory.ContainsItem(BeerGlass) then
    Exit(STATE_GIVE_SQIRKS)
  else if (Self.GetLocation() = ALKAHID) and (not Inventory.ContainsItem(BeerGlass) or not Inventory.ContainsItem(SummerSqirkJuice) or not Inventory.ContainsItem(PestleAndMortar)) then
    Exit(STATE_DO_BANKING)
  else if (Inventory.CountItem(SummerSqirk) >= 2) and Inventory.ContainsItem(BeerGlass) then
    Exit(STATE_MAKE_JUICE)
  else if (Self.GetLocation() = GARDENLOBBY) and not Inventory.ContainsItem(BeerGlass) then
    Exit(STATE_EXIT_GARDEN)
  else if (Self.GetLocation() = GARDENLOBBY) and Inventory.ContainsItem(BeerGlass) and Inventory.ContainsItem(PestleAndMortar) then
    Exit(STATE_ENTER_GARDEN)
  else if (Self.GetLocation() = GARDEN) and Inventory.ContainsItem(BeerGlass) and Inventory.ContainsItem(PestleAndMortar) then
    Exit(STATE_DO_SQIRK)
  else
    Exit(STATE_OUT_SUPPLIES);
end;

function FormatRoundedNumber(Number: Integer): String;
begin
  // If the number is >= 1 million, format it with 1 decimal place and add "M" suffix
  if Number >= 1000000 then
    Result := FormatFloat('0.0M', Number / 1000000)
  // If the number is >= 1 thousand, format it with no decimal places and add "K" suffix
  else if Number >= 1000 then
    Result := FormatFloat('0K', Number / 1000)
  // For smaller numbers, use the regular SRL.FormatNumber function
  else
    Result := SRL.FormatNumber(Number);
end;

procedure SQIRK.Report();
var
  Runtime: Integer;
  XPPerHour: Integer;
  CurrentXP: Integer;
  GainedXP: Integer;
  CurrentSqirks: Integer;
  ExpectedXP: Integer;
begin
  //ClearDebug();
  CurrentXP := XPBar.Read();
  GainedXP := CurrentXP - StartXP;
  Runtime := Timer.ElapsedTime;
  XPPerHour := Round(((CurrentXP - StartXP) / Runtime) * 3600);
  CurrentSqirks := Inventory.CountItem('Summer sq''irkjuice');
  ExpectedXP := CurrentSqirks * 3000; // Each Summer Sqirk is worth 3000 XP

  WriteLn('========================================');
  WriteLn('     BigAussies Sqirkin      ');
  WriteLn('========================================');
  WriteLn('   Runtime: ' + SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('   XP Gained: ' + FormatRoundedNumber(GainedXP));
  WriteLn('----------------------------------------');
  WriteLn('   XP/Hour: ' + FormatRoundedNumber(Round((GainedXP) / (GetTimeRunning() / 3600000))));
  WriteLn('========================================');
  WriteLn('     BigAussies Sqirkin      ');
  WriteLn('       Version: ' + {$MACRO SCRIPT_REVISION});
  WriteLn('========================================');
end;

procedure SQIRK.Init(MaxActions: UInt32; MaxTime: UInt64); override;
begin
  inherited;
  rsw.Setup([[7917, 3246, 8880, 3946]]);

  SetupNPCS();
  RSObjects.Setup();
  RSNpcs.Setup();

  rsw.AddMapAsRegion('sorcg', [0,0, 370, 350]);
  SetupObjects();

  SummerSqirk := ('Summer Sq''irk');
  PestleAndMortar := ('Pestle and mortar');
  BeerGlass := ('Beer glass');
  SummerSqirkJuice := ('Summer sq''irkjuice');
  PestleAndMortarBank := TRSBankItem.Setup(PestleAndMortar, 1, FALSE);
  Mouse.Speed := Random(22, 28);

  MINENERGY := Round(Antiban.GetUniqueNumber(50, 20, 60));
  EnergyHandler.MinInvPoints := 300;

  Options.SetZoomLevel(0);
  StartXP := XPBar.Read();
end;

procedure SQIRK.Run(MaxActions: UInt32; MaxTime: UInt64);
begin
  Self.Init(MaxActions, MaxTime);
  repeat
    Self.doAction();
    if WL.Activity.IsFinished() then
    begin
      WriteLn('No activity detected in 5 minutes! Shutting down.');
      Break;
    end;
    Self.DoAntiban;
    Self.Report();
  until Self.ShouldStop();
end;

var
  Script: SQIRK;

{$IFDEF SCRIPT_GUI}
type
  TConfig = record(TScriptForm)
    PlaceHolder: TLabeledCombobox;
  end;

procedure TConfig.Run(); override;
var
  tab: TTabSheet;
begin
  Self.Setup("BigAussies Sqirkin");
  Self.Start.SetOnClick(@Self.StartScript);

  Self.AddTab('Sqirk Settings');
  tab := Self.Tabs[High(Self.Tabs)];

  Self.CreateAccountManager(tab);

  Self.CreateVersionPanel(tab);

  Self.CreateAntibanManager();

  Self.CreateWaspLibSettings();

  Self.CreateAPISettings();

  inherited;
end;

var
  Config: TConfig;
{$ENDIF}

begin
  if (not FileExists(AppPath+'\Includes\WaspLib\osr\walker\maps\sorcg.png')) then
  begin
    WriteLn('Sorceress''s Garden Map not found. Downloading now........');
    DownloadToFile('https://i.imgur.com/we1Zrxz.png', AppPath+'\Includes\WaspLib\osr\walker\maps\sorcg.png');
  end;
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}
  Script.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.